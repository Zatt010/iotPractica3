#include <WiFi.h>
#include <PubSubClient.h>
int distance1=0;
int distance2=0;
int Speed=0;
long duration;
int distance=0;
const int trigPin = 4;
const int echoPin = 2;

const char* WIFI_SSID = "Marco04";
const char* WIFI_PASS = "Mamica123";

const char* MQTT_BROKER = "broker.hivemq.com";
const int MQTT_PORT = 1883;

const char* MQTT_CLIENT_ID = "grupo31.2";
const char* SUBSCRIBE_TOPIC = "grupo3/in";   // subscribe topic
const char* PUBLISH_TOPIC = "grupo3/out";    // publish topic

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);
float readUltrasonicDistance()
{
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  distance= duration*(0.034/2);
  
  // Prints the distance on the Serial Monitor
  //Serial.println(" distance cm : " + String(distance));
  return distance;
}
// PubSubClient callback function
void callback(const char* topic, byte* payload, unsigned int length) {
  String message;
  for (int i = 0; i < length; i++) {
    message += String((char) payload[i]);
  }
  if (String(topic) == SUBSCRIBE_TOPIC) {
    Serial.println("Message from topic " + String(topic) + " : " + message);    
  }
  if(message=="TomarVelocidad"){
     //calculating Speed
     distance1 = readUltrasonicDistance(); //calls ultrasoninicRead() function below
     
     delay(1000);//giving a time gap of 1 sec
     
     distance2 = readUltrasonicDistance(); //calls ultrasoninicRead() function below
     
     //formula change in distance divided by change in time
     Speed = abs(distance2 - distance1)/1.0; //as the time gap is 1 sec we divide it by 1.
     Serial.println("Speed: " + String(Speed));
  }   
}
boolean mqttClientConnect() {
  Serial.println("Connecting to " + String(MQTT_BROKER));
  if (mqttClient.connect(MQTT_CLIENT_ID)) {
    Serial.println("Connected to " + String(MQTT_BROKER));

    mqttClient.subscribe(SUBSCRIBE_TOPIC);
    Serial.println("Subscribed to " + String(SUBSCRIBE_TOPIC));
  } else {
    Serial.println("Can't connect to " + String(MQTT_BROKER));
  }
  return mqttClient.connected();
}

void setup()
{ 
  pinMode(trigPin, OUTPUT); 
  pinMode(echoPin, INPUT);
  Serial.begin(115200);

  Serial.println("Connecting to " + String(WIFI_SSID));
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  if (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Can't connect to " + String(WIFI_SSID));
    while (1) delay(200);
  }
  Serial.println("Connected to " + String(WIFI_SSID));

  mqttClient.setServer(MQTT_BROKER, MQTT_PORT);
  mqttClient.setCallback(callback);
}
unsigned long previousConnectMillis = 0;
unsigned long previousPublishMillis = 0;

unsigned char counter = 0;

void loop() {
  unsigned long now = millis();
  if (!mqttClient.connected()) {
    if (now - previousConnectMillis >= 2000) {
      previousConnectMillis = now;
      if (mqttClientConnect()) previousConnectMillis = 0;
      else delay(1000);
    }
  } else { // mqtt is connected
    mqttClient.loop();
    delay(20);

    if (now - previousPublishMillis >= 10000) {
      previousPublishMillis = now;
      // publish
      String message = String(Speed);
      mqttClient.publish(SUBSCRIBE_TOPIC, message.c_str());
    }
  }
}
